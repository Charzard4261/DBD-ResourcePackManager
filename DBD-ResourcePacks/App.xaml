<Application x:Class="DBD_ResourcePackManager.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:DBD_ResourcePackManager"
             xmlns:properties="clr-namespace:DBD_ResourcePackManager.Properties"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="DarkThemeBorderHover" Color="#707070"/>
        <SolidColorBrush x:Key="DarkThemeBackgroundA" Color="#1E1F22"/>
        <SolidColorBrush x:Key="DarkThemeBackgroundB" Color="#2B2D31"/>
        <SolidColorBrush x:Key="DarkThemeBackgroundDisabled" Color="#2E3035"/>
        <SolidColorBrush x:Key="DarkThemeBackgroundHover" Color="#3D3D3D"/>
        <SolidColorBrush x:Key="DarkThemeForegroundA" Color="#FAFAFA"/>
        <SolidColorBrush x:Key="DarkThemeForegroundB" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="DarkThemeForegroundDisabled" Color="#494D51"/>

        <SolidColorBrush x:Key="LightThemeBackgroundA" Color="#FAFAFA"/>
        <SolidColorBrush x:Key="LightThemeBorderHover" Color="#3C7FB1"/>
        <SolidColorBrush x:Key="LightThemeBackgroundB" Color="#EAEAEA"/>
        <SolidColorBrush x:Key="LightThemeBackgroundHover" Color="#BEE6FD"/>
        <SolidColorBrush x:Key="LightThemeForegroundA" Color="#1E1F22"/>
        <SolidColorBrush x:Key="LightThemeForegroundDisabled" Color="LightGray"/>

        <Style TargetType="{x:Type DockPanel}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type StackPanel}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Adaptive" TargetType="{x:Type Grid}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundB}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ToolBarTray}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ToolBar}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TabControl}">
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>

            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundB}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource DarkThemeBackgroundB}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light">
                    <Setter Property="Background" Value="{StaticResource LightThemeBackgroundB}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource LightThemeBackgroundB}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Margin="0">
                                <Border x:Name="innerBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Margin="-1" Opacity="0"/>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundHover}"/>
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundB}"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource LightThemeBackgroundHover}"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Button}">
            <Setter Property="Padding" Value="3,1"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <!-- Dark Theme -->
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource DarkThemeBackgroundA}"/>
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundHover}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource DarkThemeBorderHover}"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsEnabled}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundDisabled}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource DarkThemeBackgroundDisabled}"/>
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundDisabled}"/>
                </MultiDataTrigger>

                <!-- Light Theme -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light"/>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource LightThemeBackgroundHover}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource LightThemeBorderHover}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource LightThemeBorderHover}"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Ghost" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="False">
                    <Setter Property="Background" Value="{x:Null}"/>
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Label}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Obscured" TargetType="{x:Type Label}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundDisabled}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light">
                    <Setter Property="Foreground" Value="{StaticResource LightThemeForegroundDisabled}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Image}">
            <Setter Property="RenderOptions.BitmapScalingMode" Value="HighQuality"/>
        </Style>

        <Style TargetType="{x:Type CheckBox}">
            <Setter Property="Margin" Value="0,0,5,0"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ComboBoxItem}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Menu}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <Grid VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                <Path x:Name="GlyphPanel" Data="F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z" FlowDirection="LeftToRight" Fill="{TemplateBinding Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                                <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" PlacementTarget="{Binding ElementName=templateRoot}">
                                    <Border x:Name="SubMenuBorder" Background="{TemplateBinding Background}">
                                        <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                </Canvas>
                                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Left" Width="1"/>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                            </Trigger>
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsHighlighted}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource DarkThemeBackgroundHover}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource DarkThemeBorderHover}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsHighlighted}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource LightThemeBackgroundHover}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource LightThemeBorderHover}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsEnabled}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource DarkThemeForegroundDisabled}"/>
                                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource DarkThemeForegroundDisabled}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsEnabled}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource LightThemeForegroundDisabled}"/>
                                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource LightThemeForegroundDisabled}"/>
                            </MultiDataTrigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Dark">
                    <Setter Property="Background" Value="{StaticResource DarkThemeBackgroundA}"/>
                    <Setter Property="Foreground" Value="{StaticResource DarkThemeForegroundA}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=ThemeActual}" Value="Light">
                    <Setter Property="Background" Value="{StaticResource LightThemeBackgroundA}"/>
                    <Setter Property="Foreground" Value="{StaticResource LightThemeForegroundA}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

    </Application.Resources>
</Application>
